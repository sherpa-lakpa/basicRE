<?php
/**
 * This file contains Recommender class.
 */

/**
 * This is recommender class which has implemented collabrative filtering algoithm.
 * It has implemented filtering with two methods 
 * 1. Eclidean Distance 
 * 2. Pearson_correlation
 * This class uses pearson correlation to it's deafault algorith for filtering.
 */
Class Recommender{

	/**
   * @var array $dataset        It contains array of dataset and feed by contructor while creating object.
   * @var string $algorithm It contains name of algorithm to be used.
   */
	public $dataset,$algorithm;

	/**
	* Collect dataset and algorithm
	* @param array $dataset take dataset to be set to dataset property
	*
	* @param array $algorithm take dataset to be set to algorithm property
	*/
	public function __construct($dataset, $algorithm='pearson_correlation'){
		$this->dataset = $dataset;
		$this->algorithm = $algorithm;
	}

	/**
	* Uses Euclidean algorith to calculate distance score of two person.
	*
	* @param string $person1 Name of first person
	* @param string $person2 Name of second person
	*
	* @return float Returns the float value between 0 to 1.
	*/
	public function euclidean($person1, $person2){

		# Finding Euclidean distance 
		$sum_of_eclidean_distance = [];
		$both_viewed = [];
		foreach ($this->dataset[$person1] as $key1 => $value) {
			if(array_key_exists($key1, $this->dataset[$person2])){
					$both_viewed[$key1] = 1;
					// Add new data in array
					array_push($sum_of_eclidean_distance ,pow($this->dataset[$person1][$key1] - $this->dataset[$person2][$key1],2));
				}
			# Conditions to check they both have an common rating items	

			if(count($both_viewed) == 0)
				return 0;
		}
		$sum_of_eclidean_distance = array_sum($sum_of_eclidean_distance);
		return 1/(1+sqrt($sum_of_eclidean_distance));
	}

	/**
	* Uses person Correlation algorith. Gives a value between -1 to 1. A value 1 means both users are having the same taste in all most all cases.
	*
	* @param string $person1 Name of first person
	* @param string $person2 Name of second person
	*
	* @return float Returns float value between -1 to 1.
	*/
	public function pearson_correlation($person1, $person2){
		# To get both rated items
		$both_rated = [];
		foreach ($this->dataset[$person1] as $key1 => $value) {
			if(array_key_exists($key1, $this->dataset[$person2])){
					$both_rated[$key1] = 1;
				}
		}
		$number_of_ratings = count($both_rated);

		# Checking for number of ratings in common
		if($number_of_ratings == 0)
			return 0;

		# Add up all the preferences of each user
		$person1_preferences_sum = 0;
		$person1_preferences = [];
		$person2_preferences_sum = 0;
		$person2_preferences = [];
		# Sum up the squares of preferences of each user
		$person1_square_preferences_sum = 0;
		$person1_square_preferences = [];
		$person2_square_preferences_sum = 0;
		$person2_square_preferences = [];
		# Sum up the product value of both preferences for each item
		$product_sum_of_both_users = 0;
		$product_of_both_users = [];
		foreach ($both_rated as $key => $value) {
			array_push($person1_preferences, $this->dataset[$person1][$key]);
			array_push($person1_square_preferences, pow($this->dataset[$person1][$key],2));
			array_push($person2_preferences, $this->dataset[$person2][$key]);
			array_push($person2_square_preferences, pow($this->dataset[$person2][$key],2));
			array_push($product_of_both_users, $this->dataset[$person1][$key] * $this->dataset[$person2][$key]);
		}
		$person1_preferences_sum = array_sum($person1_preferences);
		$person1_square_preferences_sum = array_sum($person1_square_preferences);
		$person2_preferences_sum = array_sum($person2_preferences);
		$person2_square_preferences_sum = array_sum($person2_square_preferences);
		$product_sum_of_both_users = array_sum($product_of_both_users);

		# Calculate the pearson score
		$numerator_value = $product_sum_of_both_users - ($person1_preferences_sum * $person2_preferences_sum / $number_of_ratings);
		$denominator_value = sqrt(($person1_square_preferences_sum - pow($person1_preferences_sum, 2) / $number_of_ratings) * ($person2_square_preferences_sum - pow($person2_preferences_sum, 2) / $number_of_ratings));

		if($denominator_value == 0){
			return 0;
		}
		else{
			$r = $numerator_value / $denominator_value;
			return $r;	
		}

	}

	/**
	* Evaluate the similar users for specific person.
	*
	* @param string $person Name of person
	* @param int $number_of_users Number of similar persons
	*
	* @return array Return the number_of_users (similar persons) for a given specific person
	*/
	public function similarUsers($person, $number_of_users=4){
		$scores = [];
		foreach ($this->dataset as $otherperson => $value) {
			if($otherperson != $person) {
				$scores[$otherperson] = $this->{$this->algorithm}($person,$otherperson);
			}
		}
		arsort($scores);
		$result = [];
		$i = 0;
		foreach ($scores as $key => $value) {
			$result[$key] = $value;
			++$i;
			if($i == $number_of_users)
				break;
		}
		return $result;
	}

	/**
	* Gets recommendations for a person by using a weighted average of every other user's rankings
	*
	* @param string $person String person with whom similarity is being checked
	* @param int $number_of_items Integer number_of_items to be returned
	*
	* @return array Returns the array of items which person may like.
	*/
	public function recommend($person,$number_of_items = null){
		$totals = [];
		$simSums = [];
		$rankings_list = [];
		foreach ($this->dataset as $other => $value) {
			# don't compare me to myself
			if ($other == $person)
				continue;
		
			$sim = $this->{$this->algorithm}($person,$other);

			# ignore scores of zero or lower
			if($sim <= 0)
				continue;

			foreach ($this->dataset[$other] as $item => $value) {
				# only score movies i haven't seen yet

				if(array_key_exists($item, $this->dataset[$person]) != 1 || $this->dataset[$person][$item] == 0){

					$totals[$item] = isset($totals[$item]) ? $totals[$item] : 0;
					$simSums[$item] = isset($simSums[$item]) ? $simSums[$item] : 0;

					# Similrity * score
					$totals[$item] += $this->dataset[$other][$item] * $sim;
					# sum of similarities
					$simSums[$item] += $sim;

				}
			}
		}
		# Create the normalized list
		$rankings = [];
		foreach ($totals as $item => $total) {
			$rankings[$item] = $total/$simSums[$item];
		}
		arsort($rankings);
		$recommendataions_list = [];
		foreach ($rankings as $recommend_item => $score) {
			array_push($recommendataions_list, $recommend_item);
		}
		$result = [];
		$i = 0;
		if ($number_of_items == null) {
			return $recommendataions_list;
		}
		foreach ($recommendataions_list as $key => $value) {
			$result[$key] = $value;
			++$i;
			if($i == $number_of_items)
				break;
		}
		return $result;
	}
}
